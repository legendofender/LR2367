
#include "micromouseserver.h"

void microMouseServer::studentAI()
{
/*
 * The following are the eight functions that you can call. Feel free to create your own fuctions as well.
 * Remember that any solution that calls moveForward more than once per call of studentAI() will have points deducted.
 *
 *The following functions return if there is a wall in their respective directions
 *bool isWallLeft();
 *bool isWallRight();
 *bool isWallForward();
 *
 *The following functions move the mouse. Move forward returns if the mouse was able to move forward and can be used for error checking
 *bool moveForward();
 *void turnLeft();
 *void turnRight();
 *
 * The following functions are called when you need to output something to the UI or when you have finished the maze
 * void foundFinish();
 * void printUI(const char *mesg);
*/
    // Strategy: first, check to see if the mouse is already in the end of the maze. Then,
    // check surroundings and move based on a priority ranking if multiple paths are open (Order: Right, Forward, Left, Back)


    // what to do if the mouse is not in the maze
    if (isWallRight() == false) { //if there is no wall to the right,
        turnRight(); //turn right
        moveForward(); //then move forward
        printUI("Moved right");
    }
    else { //when there is, just move forward (when possible)
        if (isWallForward() == false) { //see if you can move forward
            moveForward(); //if you can, do it
            printUI("Moved forward");
        }
        else { //if not,
            if (isWallLeft() == false) { //see if you can move left
                turnLeft(); //if you can then do it
                moveForward();
                printUI("Moved left");
            }
            else { // if you can't, there's only one option left: backwards
                    turnLeft();
                    turnLeft();
                    moveForward();
                    printUI("Moved backwards");
            }
        }
    }
}
